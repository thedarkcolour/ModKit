plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'maven-publish'
}

version = '1.0'
group = 'thedarkcolour.modkit'
archivesBaseName = 'modkit'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: '1.19.3-2023.03.12-1.19.4'

    runs {
        client {
            workingDirectory project.file('run')
			
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'modkit'

            mods {
                modkit {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'modkit'

            mods {
                modkit {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'
            args '--mod', 'modkit', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                modkit {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.4-45.0.59'
}

processResources {
    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
            File file -> file.text = groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parse(file))
        }
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "modkit",
                "Specification-Vendor"    : "thedarkcolour",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
